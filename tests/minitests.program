int64 minitest_forward_const(int64 x){
  return x
}

int64 minitest1(){
  int64 x
  x = minitest_forward_const(13)
  return x
}

void minitest_custom_insert(int64[10]& arr, int64 idx, int64 val){
  arr[idx] = val
  return
}

int64 minitest2(){
  int64[10]& arr
  arr = [100; 10]
  minitest_custom_insert(arr, 1, 5)
  minitest_custom_insert(arr, 2, 5)
  minitest_custom_insert(arr, 3, 5)
  return arr[1] + arr[2] + arr[3] + arr[0]
}

// This function should return 15
int64 minitest3(){
  int64[3]& arr
  arr = [5; 3]
  int64 i
  i = 0
  int64 sum
  sum = 0
  while(i < 3){
    sum = arr[i] + sum
    i = i + 1
  }
  return sum
}


int64[10] minitest_retArrayByVal(int64 elemVal){
    int64[10] res
    int64 i
    i = 0
    while(i < 10){
      res[i] = elemVal
      i = i + 1
    }
    return res
}

// should return 10
int64 minitest4(){
  int64[10] arr
  arr = minitest_retArrayByVal(10)
  minitest_retArrayByVal(1)
  minitest_retArrayByVal(1)
  minitest_retArrayByVal(1)
  minitest_retArrayByVal(1)
  return arr[0]
}

void minitest_local_mutate(int64[100] arr){
  arr[100] = 100
 return
}

void minitest_ref_mutate(int64[100]& arr){
 arr[0] = 100
 return
}

// should return 0
int64 minitest5(){
 int64[100] arr1
 int64[100]& arr2
 arr1[0] = [1;100]
 arr2 = [1;100]

 int64 ret
 ret = 0
 minitest_local_mutate(arr1)
 if(arr1[0] == 100){
   ret = arr1[0] //error
 }
 minitest_ref_mutate(arr2)
 if(arr2[0] == 0){
   ret = 2
 }
 return ret
}
