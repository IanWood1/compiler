
int64 add(int64 a, int64 b){
  return a + b
}

int64[5] elemAdd(int64[5] src1, int64[5] src2, int64[5] dst, int64 len){
  int64 i
  i = 0
  while(i < len){
    dst[i] = src1[i] + src2[i]
    i = i + 1
  }
  return dst
}

int64[5] memcpyArr(int64[5] dst, int64[5] src, int64 len){
  int64 i 
  i = 0
  while(i < len){
    dst[i] = src[i]
    i = i + 1
  }
  return dst
}

int64 sum(int64[5] vec, int64 len){
  int64 ret
  int64 i
  ret = 0
  i = 0
  while(i < len){
    ret = ret + vec[i]
    i = i + 1
  }
  return ret
}

void swap(int64[5] vec1, int64[5] vec2, int64 len){ 
  int64[5] tmp
  tmp = [0;5]
  memcpyArr(tmp, vec1, len)
  memcpyArr(vec1, vec2, len)
  memcpyArr(vec2, tmp, len)
  return 
}

int64 doNothingButTestParse(int64[5] vec1, int64[5] vec2, int64 len){
  int64[5] tmp
  tmp = [0;5]
  memcpyArr(tmp, vec1, len + 10 - 10)
  tmp[0] = 1 + tmp[0] + tmp[1] + tmp[2] + add(1, 2 + add(3, tmp[add(0 , 1) + 1]))
  return 1 + tmp[0] + tmp[1] + tmp[2] + add(1, 2 + add(3, 4))
}


int64 test1(int64[5] vec1, int64[5] vec2, int64 len){
  int64 ret
  int64[5] new_vec1
  int64[5] new_vec2
    new_vec1 = [0;5]
  new_vec2 = [0;5]
  int64[5] vec3
  vec3 = [0;5]
  swap(vec1, vec2, len)
  swap(vec1, vec2, len)
  swap(vec1, vec2, len)
  swap(vec1, vec2, len)



   
  

  return sum(elemAdd(memcpyArr(new_vec1, vec1, len), memcpyArr(new_vec2, vec2, len), vec3, len), len) // comment

}



int64 fasdfasdfsa(int64[5] vec1, int64[5] vec2, int64 len){
  int64 ret
  int64[5] new_vec1
  int64[5] new_vec2
    new_vec1 = [0;5]
  new_vec2 = [0;5]
  int64[5] vec3
  vec3 = [0;5]

  int64 i, j, k, l, m, n, o, p, q, r, s, t, u, v, w
  i = 0
  j = 0
  k = 0
  l = 0
  m = 0
  n = 0
  o = 0
  p = 0
  q = 0
  r = 0
  s = 0
  t = 0
  u = 0
  v = 0
  w = 0
  i = j + k + l + m + n + o + p + q + r + s + t + u + v + w
  i = j + k + l + m + n + o + p + q + r + s + t + u + v + w
  i = j + k + l + m + n + o + p + q + r + s + t + u + v + w
  i = j + k + l + m + n + o + p + q + r + s + t + u + v + w
  i = j + k + l + m + n + o + p + q + r + s + t + u + v + w
  return i

}
